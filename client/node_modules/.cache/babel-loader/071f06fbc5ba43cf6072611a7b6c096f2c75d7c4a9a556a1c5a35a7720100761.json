{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\shiva\\\\Desktop\\\\Coding\\\\React\\\\WebRTC Video Chat\\\\client\\\\src\\\\SocketContext.js\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState, useRef, useEffect } from 'react';\nimport { io } from 'socket.io-client';\nimport Peer from 'simple-peer';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SocketContext = /*#__PURE__*/createContext();\nconst socket = io('http://localhost:5000');\nconst ContextProvider = ({\n  children\n}) => {\n  _s();\n  const [strem, setStream] = useState(null);\n  const [me, setMe] = useState('');\n  const [call, setCall] = useState({});\n  const [callAccepted, setCallAccepted] = useState(false);\n  const [callEnded, setCallEnded] = useState(false);\n  const [name, setName] = useState('');\n  const myVideo = useRef();\n  const userVideo = useRef();\n  const connectionRef = useRef();\n  useEffect(() => {\n    navigator.mediaDevices.getUserMedia({\n      video: true,\n      audio: true\n    }).then(currentStream => {\n      setStream(currentStream);\n      myVideo.current.srcObject = currentStream;\n    });\n    socket.on('me', id => setMe(id));\n    socket.on('calluser', ({\n      from,\n      name: callerName,\n      signal\n    }) => {\n      setCall({\n        isReceivedCall: true,\n        from,\n        name: callerName,\n        signal\n      });\n    });\n  }, []);\n  const answerCall = () => {\n    setCallAccepted(true);\n    const peer = new Peer({\n      initiator: false,\n      trickle: false,\n      stream\n    });\n    peer.on('signal', data => {\n      socket.emit('answercall', {\n        signal: data,\n        to: call.from\n      });\n    });\n    peer.on('stream', currentStream => {\n      userVideo.current.srcObject = currentStream;\n    });\n    peer.signal(call.signal);\n    connectionRef.current = peer;\n  };\n  const callUser = id => {\n    const peer = new Peer({\n      initiator: true,\n      trickle: false,\n      stream\n    });\n    peer.on('signal', data => {\n      socket.emit('calluser', {\n        userToCall: id,\n        signalData: data,\n        from: me,\n        name\n      });\n    });\n    peer.on('stream', currentStream => {\n      userVideo.current.srcObject = currentStream;\n    });\n    socket.on('callaccepted', signal => {\n      setCallAccepted(true);\n      peer.signal(signal);\n    });\n    connectionRef.current = peer;\n  };\n  const leaveCall = () => {\n    setCallEnded(true);\n    connectionRef.current.destroy();\n    window.location.reload();\n  };\n  return /*#__PURE__*/_jsxDEV(SocketContext.Provider, {\n    value: {\n      call,\n      callAccepted,\n      myVideo,\n      userVideo,\n      strem,\n      name,\n      setName,\n      callEnded,\n      me,\n      callUser,\n      leaveCall,\n      answerCall\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 9\n  }, this);\n};\n_s(ContextProvider, \"Ym1SEJCkSDUUeLlm0sAs6uU13ZU=\");\n_c = ContextProvider;\nexport { ContextProvider, SocketContext };\nvar _c;\n$RefreshReg$(_c, \"ContextProvider\");","map":{"version":3,"names":["React","createContext","useState","useRef","useEffect","io","Peer","jsxDEV","_jsxDEV","SocketContext","socket","ContextProvider","children","_s","strem","setStream","me","setMe","call","setCall","callAccepted","setCallAccepted","callEnded","setCallEnded","name","setName","myVideo","userVideo","connectionRef","navigator","mediaDevices","getUserMedia","video","audio","then","currentStream","current","srcObject","on","id","from","callerName","signal","isReceivedCall","answerCall","peer","initiator","trickle","stream","data","emit","to","callUser","userToCall","signalData","leaveCall","destroy","window","location","reload","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/shiva/Desktop/Coding/React/WebRTC Video Chat/client/src/SocketContext.js"],"sourcesContent":["import React, {createContext, useState, useRef, useEffect} from 'react';\r\nimport {io} from 'socket.io-client';\r\nimport Peer from 'simple-peer';\r\n\r\nconst SocketContext =createContext();\r\n\r\nconst socket = io('http://localhost:5000');\r\n\r\nconst ContextProvider = ({children}) => {\r\n\r\n    const[strem, setStream] = useState(null);\r\n    const [me , setMe] = useState('');\r\n    const [call, setCall] = useState({});\r\n    const [callAccepted, setCallAccepted] =useState(false);\r\n    const [callEnded, setCallEnded] = useState(false);\r\n    const [name, setName] = useState('')\r\n\r\n    const myVideo =useRef();\r\n    const userVideo =useRef();\r\n    const connectionRef =useRef();\r\n\r\n    useEffect(()=>{\r\n            navigator.mediaDevices.getUserMedia({video: true, audio: true})\r\n                .then((currentStream) => {\r\n                    setStream(currentStream);\r\n\r\n                    myVideo.current.srcObject = currentStream;\r\n                });\r\n                socket.on('me' , (id)=> setMe(id));\r\n\r\n                socket.on('calluser', ({from, name: callerName, signal})=>{\r\n                    setCall({isReceivedCall: true, from, name: callerName, signal})\r\n                });\r\n    }, []);\r\n\r\n    const answerCall = () => {\r\n        setCallAccepted(true)\r\n\r\n        const peer = new Peer({initiator:false, trickle:false, stream})\r\n\r\n        peer.on('signal', (data)=>{\r\n            socket.emit('answercall', {signal:data, to:call.from});\r\n        });\r\n        peer.on('stream', (currentStream) => {\r\n            userVideo.current.srcObject = currentStream;\r\n        });\r\n\r\n        peer.signal(call.signal);\r\n\r\n        connectionRef.current = peer;\r\n    }\r\n\r\n    const callUser = (id) => {\r\n        const peer = new Peer({initiator:true, trickle:false, stream})\r\n        \r\n        peer.on('signal', (data)=>{\r\n            socket.emit('calluser', {userToCall: id, signalData: data, from:me, name });\r\n        });\r\n        peer.on('stream', (currentStream) => {\r\n            userVideo.current.srcObject = currentStream;\r\n        });\r\n\r\n        socket.on('callaccepted', (signal) =>{\r\n            setCallAccepted(true);\r\n\r\n            peer.signal(signal);\r\n        });\r\n\r\n        connectionRef.current = peer;\r\n    }\r\n\r\n    const leaveCall = () => {\r\n        setCallEnded(true);\r\n\r\n        connectionRef.current.destroy();\r\n\r\n        window.location.reload();\r\n    }\r\n    return (\r\n        <SocketContext.Provider value = {{\r\n            call,\r\n            callAccepted,\r\n            myVideo,\r\n            userVideo,\r\n            strem,\r\n            name,\r\n            setName,\r\n            callEnded,\r\n            me,\r\n            callUser,\r\n            leaveCall,\r\n            answerCall,\r\n\r\n        }}>\r\n            {children}\r\n        </SocketContext.Provider>\r\n    )\r\n}\r\n\r\nexport {ContextProvider, SocketContext};\r\n\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}