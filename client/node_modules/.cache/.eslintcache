[{"C:\\Users\\shiva\\Desktop\\Coding\\React\\WebRTC Video Chat\\client\\src\\index.js":"1","C:\\Users\\shiva\\Desktop\\Coding\\React\\WebRTC Video Chat\\client\\src\\App.js":"2","C:\\Users\\shiva\\Desktop\\Coding\\React\\WebRTC Video Chat\\client\\src\\components\\VideoPlayer.jsx":"3","C:\\Users\\shiva\\Desktop\\Coding\\React\\WebRTC Video Chat\\client\\src\\components\\Videoplayer.jsx":"4","C:\\Users\\shiva\\Desktop\\Coding\\React\\WebRTC Video Chat\\client\\src\\components\\Notifications.jsx":"5","C:\\Users\\shiva\\Desktop\\Coding\\React\\WebRTC Video Chat\\client\\src\\components\\Options.jsx":"6","C:\\Users\\shiva\\Desktop\\Coding\\React\\WebRTC Video Chat\\client\\src\\SocketContext.js":"7"},{"size":273,"mtime":1689362290168,"results":"8","hashOfConfig":"9"},{"size":1582,"mtime":1689449464080,"results":"10","hashOfConfig":"9"},{"size":150,"mtime":1689194067251,"results":"11","hashOfConfig":"12"},{"size":2089,"mtime":1689450451306,"results":"13","hashOfConfig":"9"},{"size":172,"mtime":1689195818165,"results":"14","hashOfConfig":"9"},{"size":3964,"mtime":1689456755365,"results":"15","hashOfConfig":"9"},{"size":2937,"mtime":1689365535082,"results":"16","hashOfConfig":"9"},{"filePath":"17","messages":"18","suppressedMessages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"tsbcze",{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"23","messages":"24","suppressedMessages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1bzko4u",{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29"},{"filePath":"30","messages":"31","suppressedMessages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"34","messages":"35","suppressedMessages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37"},{"filePath":"38","messages":"39","suppressedMessages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},"C:\\Users\\shiva\\Desktop\\Coding\\React\\WebRTC Video Chat\\client\\src\\index.js",[],[],"C:\\Users\\shiva\\Desktop\\Coding\\React\\WebRTC Video Chat\\client\\src\\App.js",[],[],"C:\\Users\\shiva\\Desktop\\Coding\\React\\WebRTC Video Chat\\client\\src\\components\\VideoPlayer.jsx",[],[],"C:\\Users\\shiva\\Desktop\\Coding\\React\\WebRTC Video Chat\\client\\src\\components\\Videoplayer.jsx",["42"],[],"import React, {useContext} from \"react\";\r\n\r\n\r\nimport Paper from \"@mui/material\";\r\nimport { Grid } from \"@mui/material\";\r\nimport Typography from '@mui/material/Typography';\r\nimport { makeStyles } from \"@mui/styles\";\r\n\r\nimport { SocketContext } from \"../SocketContext\";\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    video: {\r\n      width: '650px',\r\n\r\n\r\n      \"@media (max-width: 1440px)\": {\r\n        video: {\r\n          width: '300px'\r\n          \r\n         }\r\n    }\r\n\r\n \r\n    },\r\n\r\n    gridContainer: {\r\n      justifyContent: 'center',\r\n\r\n      \"@media (max-width: 1440px)\": {\r\n        gridContainer: {\r\n          width: '90%'\r\n          \r\n         }\r\n    }\r\n\r\n\r\n      \r\n    },\r\n    paper: {\r\n      padding: '10px',\r\n      border: '2px solid black',\r\n      margin: '10px',\r\n      background: \"white\",\r\n    },\r\n  }));\r\n\r\n\r\nconst Videoplayer = () => {\r\n    const {name, callAccepted, myVideo, userVideo, callEnded, stream, call} = useContext(SocketContext);\r\n    const classes = useStyles();\r\n    return(\r\n        <Grid container className={classes.gridContainer}>\r\n            {/* Our own Video */}\r\n            {\r\n              stream && (\r\n                <paper className={classes.paper}>\r\n                <Grid item xs={12} md={6}>\r\n                    <Typography variant=\"h5\" gutterBottom >{name || 'Name'}</Typography>\r\n                    <video playsInline muted ref={myVideo} autoPlay className={classes.video} />\r\n                </Grid>\r\n                 </paper>\r\n              )\r\n            }\r\n\r\n            \r\n            {/* User's video  */}\r\n\r\n              {\r\n                callAccepted && !callEnded && (\r\n                  <paper className={classes.paper}>\r\n                  <Grid item xs={12} md={6}>\r\n                      <Typography variant=\"h5\" gutterBottom >{call.name || 'Name'} </Typography>\r\n                      <video playsInline muted ref={userVideo} autoPlay className={classes.video} />\r\n                  </Grid>\r\n              </paper>\r\n                )\r\n              }\r\n\r\n            \r\n        </Grid>\r\n    );\r\n}\r\nexport default Videoplayer;","C:\\Users\\shiva\\Desktop\\Coding\\React\\WebRTC Video Chat\\client\\src\\components\\Notifications.jsx",[],[],[],"C:\\Users\\shiva\\Desktop\\Coding\\React\\WebRTC Video Chat\\client\\src\\components\\Options.jsx",["43"],[],"import React, { useContext, useState } from \"react\";\r\nimport { Paper } from \"@mui/material\";\r\nimport {Button} from \"@mui/material\";\r\nimport {TextField} from \"@mui/material\";\r\nimport {Grid} from \"@mui/material\";\r\nimport {Typography} from \"@mui/material\";\r\nimport {Container} from \"@mui/material\";\r\nimport { makeStyles } from \"@mui/styles\";\r\nimport CopyToClipboard from \"react-copy-to-clipboard\";\r\nimport PhoneIcon from '@mui/icons-material/Phone';\r\nimport AssignmentIcon from '@mui/icons-material/Assignment';\r\nimport PhoneDisabledIcon from '@mui/icons-material/PhoneDisabled';\r\nimport { SocketContext } from \"../SocketContext.js\";\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n      display: 'flex',\r\n      flexDirection: 'column',\r\n      \r\n    },\r\n   \r\n    gridContainer: {\r\n      width: '100%',\r\n      \"@media (max-width: 1440px)\": {\r\n        gridContainer: {\r\n          flexDirection:\"column\"   \r\n         }\r\n    }\r\n    },\r\n\r\n\r\n    container: {\r\n      width: '600px',\r\n      margin: '35px 0',\r\n      padding: 0,\r\n      background: 'white',\r\n      border: '2px solid black',\r\n       \"@media (max-width: 1440px)\": {\r\n        container: {\r\n          width: '80%'\r\n          \r\n         }\r\n    }\r\n    },\r\n    margin: {\r\n      marginTop: 20,\r\n    },\r\n    padding: {\r\n      padding: 20,\r\n    },\r\n    paper: {\r\n      padding: '15px 25px',\r\n    //   border: '2px solid black',\r\n      \r\n    },\r\n   }));\r\n\r\n\r\nconst Options = ({children}) =>{\r\n    const {me, callAccepted, name, setName, callEnded, leaveCall, callUser  } = useContext(SocketContext);\r\n    const [idToCall, setIdToCall] = useState('');\r\n    const classes = useStyles();\r\n    return(\r\n        <Container className={classes.container} >\r\n            <paper elevation={10} className={classes.paper}>\r\n                <form className={classes.root} noValidate autoComplete=\"off\">\r\n                    <Grid container className={classes.gridContainer}>\r\n                        <Grid item xs={12} md={6} className={classes.padding}>\r\n                            <Typography gutterBottom variant='h6'>Account Info</Typography>\r\n                            <TextField label='Name' value={name} onChange={(e)=> setName(e.target.value)} fullWidth/>\r\n                            <CopyToClipboard text={me} className={classes.margin}>\r\n                                <Button variant='contained' color='primary' fullWidth startIcon={<AssignmentIcon fontSize=\"large\"/>}>\r\n                                    Copy Your ID\r\n                                </Button>\r\n\r\n                            </CopyToClipboard>\r\n\r\n                        </Grid>\r\n\r\n\r\n                        <Grid item xs={12} md={6} className={classes.padding}>\r\n                            <Typography gutterBottom variant='h6'>Make a Call</Typography>\r\n                            <TextField label='ID to Call' value={idToCall} onChange={(e)=> setIdToCall(e.target.value)} fullWidth/>\r\n                            {callAccepted && !callEnded ? (\r\n                                <Button variant=\"contained\" color='secondary' startIcon={<PhoneDisabledIcon fontSize=\"large\"/>}\r\n                                fullWidth onClick={leaveCall} className={classes.margin}>\r\n                                    Hang Up\r\n                                </Button>) :(\r\n                                <Button\r\n                                variant=\"contained\" color='primary' startIcon={<PhoneIcon fontSize=\"large\"/>}\r\n                                fullWidth onClick={()=> callUser(idToCall)} className={classes.margin}\r\n                                >\r\n                                    Call\r\n                                </Button>\r\n                            )\r\n                                }\r\n\r\n                        </Grid>\r\n\r\n\r\n                    </Grid>\r\n\r\n                </form>\r\n                {children}\r\n            </paper>\r\n\r\n         \r\n           \r\n        </Container>\r\n    );\r\n}\r\n\r\nexport default Options;","C:\\Users\\shiva\\Desktop\\Coding\\React\\WebRTC Video Chat\\client\\src\\SocketContext.js",[],[],[],{"ruleId":"44","severity":1,"message":"45","line":4,"column":8,"nodeType":"46","messageId":"47","endLine":4,"endColumn":13},{"ruleId":"44","severity":1,"message":"45","line":2,"column":10,"nodeType":"46","messageId":"47","endLine":2,"endColumn":15},"no-unused-vars","'Paper' is defined but never used.","Identifier","unusedVar"]